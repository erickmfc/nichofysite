'use client'

import { ProtectedRoute } from '@/components/auth/ProtectedRoute'
import { useAuth } from '@/hooks/useAuth'
import { ContentApprovalService } from '@/lib/services/ContentApprovalService'
import { useToast } from '@/components/ui/Toast'
import { useState } from 'react'

export default function CriarConteudoPage() {
  const { user } = useAuth()
  const { addToast } = useToast()
  const [isGenerating, setIsGenerating] = useState(false)
  const [formData, setFormData] = useState({
    tipo: 'Post para Instagram',
    nicho: 'Direito',
    topico: '',
    descricao: '',
    conteudo: ''
  })

  const nichosDisponiveis = [
    'Direito', 'Sa√∫de & Bem-Estar', 'Tecnologia', 'Gastronomia', 'Beleza & Est√©tica',
    'Varejo & E-commerce', 'Fitness & Esportes', 'Mercado Imobili√°rio', 'Contabilidade & Finan√ßas',
    'Pet Shops & Veterin√°ria', 'Educa√ß√£o & Cursos', 'Turismo & Hotelaria', 'Psicologia & Sa√∫de Mental',
    'Odontologia', 'Farm√°cia & Medicamentos', 'Drogarias & Perfumarias', 'Fisioterapia & Reabilita√ß√£o',
    'Nutri√ß√£o & Diet√©tica', 'Veterin√°ria & Cl√≠nicas', 'Arquitetura & Engenharia', 'Design & Comunica√ß√£o Visual',
    'Marketing & Publicidade', 'Consultoria Empresarial', 'Coaching & Desenvolvimento', 'Automotivo & Oficinas',
    'Constru√ß√£o Civil', 'Seguran√ßa & Vigil√¢ncia', 'Limpeza & Conserva√ß√£o', 'Jardinagem & Paisagismo',
    'Eventos & Festas', 'Fotografia & V√≠deo', 'M√∫sica & Entretenimento', 'Moda & Vestu√°rio',
    'Esportes & Lazer', 'Livrarias & Editoras', 'Brinquedos & Infantil', 'Casa & Decora√ß√£o',
    'Eletr√¥nicos & Tecnologia', 'M√≥veis & Mobili√°rio', 'Ferramentas & Equipamentos', 'Agricultura & Agropecu√°ria',
    'Transporte & Log√≠stica', 'Comunica√ß√£o & M√≠dia', 'Seguros & Previd√™ncia', 'Investimentos & Bolsa',
    'Imobili√°rias & Incorporadoras', 'Escrit√≥rios de Advocacia', 'Cl√≠nicas M√©dicas', 'Laborat√≥rios & An√°lises',
    'Radiologia & Diagn√≥stico', 'Psiquiatria & Sa√∫de Mental', 'Cardiologia', 'Dermatologia',
    'Ginecologia & Obstetr√≠cia', 'Pediatria', 'Ortopedia & Traumatologia', 'Neurologia',
    'Oftalmologia', 'Otorrinolaringologia', 'Urologia', 'Endocrinologia',
    'Gastroenterologia', 'Pneumologia', 'Reumatologia', 'Oncologia',
    'Geriatria', 'Anestesiologia', 'Cirurgia Geral', 'Cirurgia Pl√°stica',
    'Cirurgia Vascular', 'Cirurgia Cardiovascular', 'Neurocirurgia', 'Cirurgia Ortop√©dica',
    'Cirurgia Pedi√°trica', 'Cirurgia Tor√°cica', 'Cirurgia Digestiva', 'Cirurgia Urol√≥gica',
    'Cirurgia Ginecol√≥gica', 'Cirurgia Oftalmol√≥gica', 'Cirurgia Otorrinolaringol√≥gica', 'Cirurgia Maxilofacial',
    'Cirurgia Traumatol√≥gica', 'Cirurgia Oncol√≥gica', 'Cirurgia de Transplantes', 'Cirurgia Rob√≥tica',
    'Cirurgia Laparosc√≥pica', 'Cirurgia Endosc√≥pica', 'Microcirurgia', 'Cirurgia de Emerg√™ncia',
    'Cirurgia Ambulatorial', 'Cirurgia Hospitalar', 'Cirurgia Privada', 'Cirurgia P√∫blica'
  ]

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    })
  }

  const handleGenerate = async () => {
    if (!user) {
      addToast({
        type: 'error',
        title: 'Erro de Autentica√ß√£o',
        message: 'Usu√°rio n√£o autenticado'
      })
      return
    }

    if (!formData.topico.trim() || !formData.descricao.trim()) {
      addToast({
        type: 'error',
        title: 'Campos Obrigat√≥rios',
        message: 'Por favor, preencha o t√≥pico e a descri√ß√£o'
      })
      return
    }

    setIsGenerating(true)
    try {
      // Simular gera√ß√£o de conte√∫do
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Gerar conte√∫do baseado no t√≥pico e descri√ß√£o
      const conteudoGerado = `üéØ ${formData.topico}

${formData.descricao}

üí° Dica: Este conte√∫do foi gerado para ${formData.tipo} no nicho de ${formData.nicho}.

#${formData.nicho.toLowerCase()} #conteudo #marketing`

      setFormData(prev => ({ ...prev, conteudo: conteudoGerado }))
      
      // Enviar para aprova√ß√£o automaticamente
      await ContentApprovalService.submitForApproval({
        userId: user.uid,
        userEmail: user.email || '',
        userName: user.displayName || user.email?.split('@')[0] || 'Usu√°rio',
        title: `${formData.topico} - ${formData.tipo}`,
        description: formData.descricao,
        category: formData.nicho,
        content: conteudoGerado,
        platform: formData.tipo
      })
      
      addToast({
        type: 'success',
        title: 'Conte√∫do Enviado para Aprova√ß√£o! üéâ',
        message: 'O administrador ir√° revisar e aprovar em breve.',
        action: {
          label: 'Ver Meus Pedidos',
          onClick: () => window.location.href = '/meus-pedidos'
        }
      })
    } catch (err) {
      console.error('Erro ao gerar conte√∫do:', err)
      addToast({
        type: 'error',
        title: 'Erro ao Gerar Conte√∫do',
        message: 'Tente novamente em alguns instantes.'
      })
    } finally {
      setIsGenerating(false)
    }
  }
  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <h1 className="text-3xl font-bold mb-6">Criar Conte√∫do</h1>
          
          <div className="bg-white p-8 rounded-lg shadow">
            <form className="space-y-6">
              <div>
                <label className="block text-sm font-medium mb-2">Tipo de Conte√∫do</label>
                <select 
                  name="tipo"
                  value={formData.tipo}
                  onChange={handleChange}
                  className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option>Post para Instagram</option>
                  <option>Post para LinkedIn</option>
                  <option>Artigo para Blog</option>
                  <option>Story para Instagram</option>
                  <option>Thread para Twitter</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">Nicho</label>
                <select 
                  name="nicho"
                  value={formData.nicho}
                  onChange={handleChange}
                  className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  {nichosDisponiveis.map((nicho) => (
                    <option key={nicho} value={nicho}>{nicho}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">T√≥pico</label>
                <input 
                  name="topico"
                  type="text" 
                  value={formData.topico}
                  onChange={handleChange}
                  className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Ex: Direito trabalhista, sa√∫de mental, IA..."
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">Descri√ß√£o</label>
                <textarea 
                  name="descricao"
                  value={formData.descricao}
                  onChange={handleChange}
                  className="w-full p-3 border rounded-lg h-32 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                  placeholder="Descreva o que voc√™ quer criar..."
                ></textarea>
              </div>

              {formData.conteudo && (
                <div>
                  <label className="block text-sm font-medium mb-2">Conte√∫do Gerado</label>
                  <div className="w-full p-3 border rounded-lg bg-gray-50 min-h-32">
                    <pre className="whitespace-pre-wrap text-gray-800">{formData.conteudo}</pre>
                  </div>
                </div>
              )}
              
              <div className="flex gap-4">
                <button 
                  onClick={handleGenerate}
                  disabled={isGenerating}
                  className="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50"
                >
                  {isGenerating ? 'Gerando...' : 'Gerar Conte√∫do'}
                </button>
                <button 
                  onClick={() => success('Rascunho Salvo!', 'Seu conte√∫do foi salvo como rascunho.')}
                  className="bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors"
                >
                  Salvar Rascunho
                </button>
              </div>
            </form>
          </div>
          
          <div className="mt-8 bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">Templates R√°pidos</h2>
            <div className="grid md:grid-cols-2 gap-4">
              <div 
                className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-all hover:shadow-md"
                onClick={() => success('Template Aplicado!', 'Post Motivacional carregado com sucesso.')}
              >
                <h3 className="font-semibold">Post Motivacional</h3>
                <p className="text-sm text-gray-600">Template para posts inspiracionais</p>
              </div>
              <div 
                className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-all hover:shadow-md"
                onClick={() => success('Template Aplicado!', 'Dica Profissional carregada com sucesso.')}
              >
                <h3 className="font-semibold">Dica Profissional</h3>
                <p className="text-sm text-gray-600">Template para compartilhar conhecimento</p>
              </div>
              <div 
                className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-all hover:shadow-md"
                onClick={() => success('Template Aplicado!', 'Pergunta Engajante carregada com sucesso.')}
              >
                <h3 className="font-semibold">Pergunta Engajante</h3>
                <p className="text-sm text-gray-600">Template para aumentar intera√ß√£o</p>
              </div>
              <div 
                className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-all hover:shadow-md"
                onClick={() => success('Template Aplicado!', 'Case de Sucesso carregado com sucesso.')}
              >
                <h3 className="font-semibold">Case de Sucesso</h3>
                <p className="text-sm text-gray-600">Template para contar hist√≥rias</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ProtectedRoute>
  )
}
